
AVRASM ver. 2.2.7  D:\Sem 3\3-EE2016 Micrprocessor Theory\Lab component\ee19b032_partC_midsem_ee2016\ee19b032_partC_midsem_ee2016\main.asm Sat Jan 09 07:47:04 2021

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m8def.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m8def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8.xml *************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m8def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega8
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega8
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M8DEF_INC_
                                 #define _M8DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega8
                                 #pragma AVRPART ADMIN PART_NAME ATmega8
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x93
                                 .equ	SIGNATURE_002	= 0x07
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCL	= 0x04
                                 .equ	ADCH	= 0x05
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 
                                 ; TCCR0 - Timer/Counter0 Control Register
                                 .equ	CS00	= 0	; Clock Select0 bit 0
                                 .equ	CS01	= 1	; Clock Select0 bit 1
                                 .equ	CS02	= 2	; Clock Select0 bit 2
                                 
                                 ; TCNT0 - Timer Counter 0
                                 .equ	TCNT00	= 0	; Timer Counter 0 bit 0
                                 .equ	TCNT01	= 1	; Timer Counter 0 bit 1
                                 .equ	TCNT02	= 2	; Timer Counter 0 bit 2
                                 .equ	TCNT03	= 3	; Timer Counter 0 bit 3
                                 .equ	TCNT04	= 4	; Timer Counter 0 bit 4
                                 .equ	TCNT05	= 5	; Timer Counter 0 bit 5
                                 .equ	TCNT06	= 6	; Timer Counter 0 bit 6
                                 .equ	TCNT07	= 7	; Timer Counter 0 bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write Section Read Enable
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PUD	= 2	; Pull-up Disable
                                 .equ	ADHSM	= 4	; ADC High Speed Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	WTDON	= 6	; Enable watchdog
                                 .equ	RSTDISBL	= 7	; Disable reset
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 8192
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xc00
                                 .equ	NRWW_STOP_ADDR	= 0xfff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xbff
                                 .equ	PAGESIZE	= 32
                                 .equ	FIRSTBOOTSTART	= 0xf80
                                 .equ	SECONDBOOTSTART	= 0xf00
                                 .equ	THIRDBOOTSTART	= 0xe00
                                 .equ	FOURTHBOOTSTART	= 0xc00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0003	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0004	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0005	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0006	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0007	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0008	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0009	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x000a	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x000b	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x000c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x000d	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x000e	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x000f	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0010	; Analog Comparator
                                 .equ	TWIaddr	= 0x0011	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0012	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 19	; size in words
                                 
                                 #pragma AVRPART CORE INSTRUCTIONS_NOT_SUPPORTED break
                                 
                                 #endif  /* _M8DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; ee19b032_partC_midsem_ee2016.asm
                                 ;
                                 ; Created: 11/7/2020 4:28:07 PM
                                 ; Author : KATARI HARI CHANDAN
                                 ;										5 TAP FIR FILTER
                                 ;
                                 
                                 
                                 ; Replace with your application code
                                 
                                 .CSEG
000000 e8e8                      LDI ZL, LOW(FIR_COEFF<<1);
000001 e0e0                      LDI ZL, HIGH(FIR_COEFF<<1);
000002 e6a0                      LDI XL, 0X60;
000003 e0b0                      LDI XH, 0X00;
000004 e0f5                      LDI R31, 5;
000005 9145                      STORING_COEFFS: LPM R20, Z+;
000006 934d                      ST X+, R20;
000007 95fa                      DEC R31;
000008 f7e1                      BRNE STORING_COEFFS;
                                 
000009 e8ee                      LDI ZL, LOW(SAMPLING_VALUES<<1);
00000a e0f0                      LDI ZH, HIGH(SAMPLING_VALUES<<1);
00000b e8c0                      LDI YL, 0X80;
00000c e0d0                      LDI YH, 0X00;
00000d e0f4                      LDI R31, 4;
00000e 9145                      STORING_SAMPLING_VALUES: LPM R20, Z+;
00000f 9349                      ST Y+, R20;
000010 95fa                      DEC R31;
000011 f7e1                      BRNE STORING_SAMPLING_VALUES;
                                 
000012 efc4                      LDI R28, LOW(500); this is the counter for 800 samples
000013 e0d1                      LDI R29, HIGH(500);
000014 eba0                      LDI R26, 0XB0; storing address of output location
000015 e0b0                      LDI R27, 0X00;
                                 
000016 9025                      LATEST_SAMPLE:LPM R2, Z+;		Already 4 samples are stored and now we are storing the 5th sample.(Latest sample)
000017 8228                      ST Y, R2;				We did not increment Y this time.
                                 
000018 e6a0                      LDI XL, 0X60;
000019 e0b0                      LDI XH, 0X00;
00001a e0f5                      LDI R31, 5;		This is muptiply and add counter. We are setting it to 5 so that, it multiplies and accumulates 5 times.
00001b e090                      LDI R25, 0;
00001c 2e29                      MOV R2,R25;	R4-R3-R2(24 bit storage) Store the accumulated result. (R4 is MS Byte and R2 is LS Byte) Hence we are initializing those bytes to 0s.
00001d 2e39                      MOV R3,R25;	We took 3 bytes because the sum might contain a carry by which 8bit+8bit = 16 bit + carry. Hence we took 24 bit storage for the accumulated result.
00001e 2e49                      MOV R4,R25;
                                 
00001f 910d                      MUL_ACC:LD R16, X+; multiply and accumulate
000020 8118                      LD R17, Y;
000021 0201                      MULS R16,R17;	MULS operation stores the result in R0,R1 registers.(Upper Byte R1 and Lower Byte R2)
000022 e090                      LDI R25, 0;
000023 2011                      TST R1;			Let us Test whether the result of the multiplication is positive or negative by testing the upper byte of the result.
000024 f40a                      BRPL IF_POSITIVE;	If the TST result is positive, it branches to "IF_POSITIVE" line of the code.
000025 ef9f                      LDI R25, 0XFF;					If the product result in negative, since we are suppose to report the 2's compliment, we are making all the bits in front of the number as 11111...
000026 0c20                      IF_POSITIVE:ADD R2, R0;		
000027 1c31                      ADC R3, R1;
000028 1e44                      ADC R4, R20;
000029 95ca                      DEC YL;
00002a 37cf                      CPI YL, 0X7F;
00002b f411                      BRNE TO_NEXT_OLDER_SAMPLE ;
00002c e8c4                      LDI YL, 0X84; go to bottom of buffer if went over the top
00002d e0d0                      LDI YH, 0X00;
00002e 950a                      TO_NEXT_OLDER_SAMPLE:DEC R16; decrement MAC counter
00002f f779                      BRNE MUL_ACC;
000030 95c3                      INC YL;
000031 38c5                      CPI YL, 0X85
000032 f409                      BRNE TO_NEXT_BUFFER;
                                 
000033 e8c0                      LDI YL, 0X80; 
000034 2e5a                      TO_NEXT_BUFFER:MOV R5, R26;		Go to top of next buffer if went below the bottom of the older buffer.
000035 2e6b                      MOV R6, R27;
000036 2fac                      MOV R26, YL;
000037 2fbd                      MOV R27, YH;
000038 2dc5                      MOV YL, R5;
000039 2dd6                      MOV YH, R6;
00003a 9239                      ST Y+, R3; store output in the SRAM
00003b 2e5a                      MOV R5, R26;
00003c 2e6b                      MOV R6, R27;
00003d 2fac                      MOV R26, YL;
00003e 2fbd                      MOV R27, YH;
00003f 2dc5                      MOV YL, R5;
000040 2dd6                      MOV YH, R6;
000041 9721                      SBIW R29:R28, 1; decrement the 500 sample counter
000042 f699                      BRNE LATEST_SAMPLE;
000043 0000                      NOP;
000044 0dcf                      FIR_COEFF: .db 0XCF, 0X0D
000045 0d58                      		.db 0X58, 0X0D
000046 00cf                      		.db 0XCF, 0X00
                                 
000047 8700                      SAMPLING_VALUES: .db 0x0, 0x87
000048 4bb5                      .db 0xb5, 0x4b
000049 0079                      .db 0x79, 0x0
00004a b587                      .db 0x87, 0xb5
00004b 794b                      .db 0x4b, 0x79
00004c 8700                      .db 0x0, 0x87
00004d 4bb5                      .db 0xb5, 0x4b
00004e 0079                      .db 0x79, 0x0
00004f b587                      .db 0x87, 0xb5
000050 794b                      .db 0x4b, 0x79
000051 8700                      .db 0x0, 0x87
000052 4bb5                      .db 0xb5, 0x4b
000053 0079                      .db 0x79, 0x0
000054 b587                      .db 0x87, 0xb5
000055 794b                      .db 0x4b, 0x79
000056 8700                      .db 0x0, 0x87
000057 4bb5                      .db 0xb5, 0x4b
000058 0079                      .db 0x79, 0x0
000059 b587                      .db 0x87, 0xb5
00005a 794b                      .db 0x4b, 0x79
00005b 8700                      .db 0x0, 0x87
00005c 4bb5                      .db 0xb5, 0x4b
00005d 0079                      .db 0x79, 0x0
00005e b587                      .db 0x87, 0xb5
00005f 794b                      .db 0x4b, 0x79
000060 8700                      .db 0x0, 0x87
000061 4bb5                      .db 0xb5, 0x4b
000062 0079                      .db 0x79, 0x0
000063 b587                      .db 0x87, 0xb5
000064 794b                      .db 0x4b, 0x79
000065 8700                      .db 0x0, 0x87
000066 4bb5                      .db 0xb5, 0x4b
000067 0079                      .db 0x79, 0x0
000068 b587                      .db 0x87, 0xb5
000069 794b                      .db 0x4b, 0x79
00006a 8700                      .db 0x0, 0x87
00006b 4bb5                      .db 0xb5, 0x4b
00006c 0079                      .db 0x79, 0x0
00006d b587                      .db 0x87, 0xb5
00006e 794b                      .db 0x4b, 0x79
00006f 8700                      .db 0x0, 0x87
000070 4bb5                      .db 0xb5, 0x4b
000071 0079                      .db 0x79, 0x0
000072 b587                      .db 0x87, 0xb5
000073 794b                      .db 0x4b, 0x79
000074 8700                      .db 0x0, 0x87
000075 4bb5                      .db 0xb5, 0x4b
000076 0079                      .db 0x79, 0x0
000077 b587                      .db 0x87, 0xb5
000078 794b                      .db 0x4b, 0x79
000079 8700                      .db 0x0, 0x87
00007a 4bb5                      .db 0xb5, 0x4b
00007b 0079                      .db 0x79, 0x0
00007c b587                      .db 0x87, 0xb5
00007d 794b                      .db 0x4b, 0x79
00007e 8700                      .db 0x0, 0x87
00007f 4bb5                      .db 0xb5, 0x4b
000080 0079                      .db 0x79, 0x0
000081 b587                      .db 0x87, 0xb5
000082 794b                      .db 0x4b, 0x79
000083 8700                      .db 0x0, 0x87
000084 4bb5                      .db 0xb5, 0x4b
000085 0079                      .db 0x79, 0x0
000086 b587                      .db 0x87, 0xb5
000087 794b                      .db 0x4b, 0x79
000088 8700                      .db 0x0, 0x87
000089 4bb5                      .db 0xb5, 0x4b
00008a 0079                      .db 0x79, 0x0
00008b b587                      .db 0x87, 0xb5
00008c 794b                      .db 0x4b, 0x79
00008d 8700                      .db 0x0, 0x87
00008e 4bb5                      .db 0xb5, 0x4b
00008f 0079                      .db 0x79, 0x0
000090 b587                      .db 0x87, 0xb5
000091 794b                      .db 0x4b, 0x79
000092 8700                      .db 0x0, 0x87
000093 4bb5                      .db 0xb5, 0x4b
000094 0079                      .db 0x79, 0x0
000095 b587                      .db 0x87, 0xb5
000096 794b                      .db 0x4b, 0x79
000097 8700                      .db 0x0, 0x87
000098 4bb5                      .db 0xb5, 0x4b
000099 0079                      .db 0x79, 0x0
00009a b587                      .db 0x87, 0xb5
00009b 794b                      .db 0x4b, 0x79
00009c 8700                      .db 0x0, 0x87
00009d 4bb5                      .db 0xb5, 0x4b
00009e 0079                      .db 0x79, 0x0
00009f b587                      .db 0x87, 0xb5
0000a0 794b                      .db 0x4b, 0x79
0000a1 8700                      .db 0x0, 0x87
0000a2 4bb5                      .db 0xb5, 0x4b
0000a3 0079                      .db 0x79, 0x0
0000a4 b587                      .db 0x87, 0xb5
0000a5 794b                      .db 0x4b, 0x79
0000a6 8700                      .db 0x0, 0x87
0000a7 4bb5                      .db 0xb5, 0x4b
0000a8 0079                      .db 0x79, 0x0
0000a9 b587                      .db 0x87, 0xb5
0000aa 794b                      .db 0x4b, 0x79
0000ab 8700                      .db 0x0, 0x87
0000ac 4bb5                      .db 0xb5, 0x4b
0000ad 0079                      .db 0x79, 0x0
0000ae b587                      .db 0x87, 0xb5
0000af 794b                      .db 0x4b, 0x79
0000b0 8700                      .db 0x0, 0x87
0000b1 4bb5                      .db 0xb5, 0x4b
0000b2 0079                      .db 0x79, 0x0
0000b3 b587                      .db 0x87, 0xb5
0000b4 794b                      .db 0x4b, 0x79
0000b5 8700                      .db 0x0, 0x87
0000b6 4bb5                      .db 0xb5, 0x4b
0000b7 0079                      .db 0x79, 0x0
0000b8 b587                      .db 0x87, 0xb5
0000b9 794b                      .db 0x4b, 0x79
0000ba 8700                      .db 0x0, 0x87
0000bb 4bb5                      .db 0xb5, 0x4b
0000bc 0079                      .db 0x79, 0x0
0000bd b587                      .db 0x87, 0xb5
0000be 794b                      .db 0x4b, 0x79
0000bf 8700                      .db 0x0, 0x87
0000c0 4bb5                      .db 0xb5, 0x4b
0000c1 0079                      .db 0x79, 0x0
0000c2 b587                      .db 0x87, 0xb5
0000c3 794b                      .db 0x4b, 0x79
0000c4 8700                      .db 0x0, 0x87
0000c5 4bb5                      .db 0xb5, 0x4b
0000c6 0079                      .db 0x79, 0x0
0000c7 b587                      .db 0x87, 0xb5
0000c8 794b                      .db 0x4b, 0x79
0000c9 8700                      .db 0x0, 0x87
0000ca 4bb5                      .db 0xb5, 0x4b
0000cb 0079                      .db 0x79, 0x0
0000cc b587                      .db 0x87, 0xb5
0000cd 794b                      .db 0x4b, 0x79
0000ce 8700                      .db 0x0, 0x87
0000cf 4bb5                      .db 0xb5, 0x4b
0000d0 0079                      .db 0x79, 0x0
0000d1 b587                      .db 0x87, 0xb5
0000d2 794b                      .db 0x4b, 0x79
0000d3 8700                      .db 0x0, 0x87
0000d4 4bb5                      .db 0xb5, 0x4b
0000d5 0079                      .db 0x79, 0x0
0000d6 b587                      .db 0x87, 0xb5
0000d7 794b                      .db 0x4b, 0x79
0000d8 8700                      .db 0x0, 0x87
0000d9 4bb5                      .db 0xb5, 0x4b
0000da 0079                      .db 0x79, 0x0
0000db b587                      .db 0x87, 0xb5
0000dc 794b                      .db 0x4b, 0x79
0000dd 8700                      .db 0x0, 0x87
0000de 4bb5                      .db 0xb5, 0x4b
0000df 0079                      .db 0x79, 0x0
0000e0 b587                      .db 0x87, 0xb5
0000e1 794b                      .db 0x4b, 0x79
0000e2 8700                      .db 0x0, 0x87
0000e3 4bb5                      .db 0xb5, 0x4b
0000e4 0079                      .db 0x79, 0x0
0000e5 b587                      .db 0x87, 0xb5
0000e6 794b                      .db 0x4b, 0x79
0000e7 8700                      .db 0x0, 0x87
0000e8 4bb5                      .db 0xb5, 0x4b
0000e9 0079                      .db 0x79, 0x0
0000ea b587                      .db 0x87, 0xb5
0000eb 794b                      .db 0x4b, 0x79
0000ec 8700                      .db 0x0, 0x87
0000ed 4bb5                      .db 0xb5, 0x4b
0000ee 0079                      .db 0x79, 0x0
0000ef b587                      .db 0x87, 0xb5
0000f0 794b                      .db 0x4b, 0x79
0000f1 8700                      .db 0x0, 0x87
0000f2 4bb5                      .db 0xb5, 0x4b
0000f3 0079                      .db 0x79, 0x0
0000f4 b587                      .db 0x87, 0xb5
0000f5 794b                      .db 0x4b, 0x79
0000f6 8700                      .db 0x0, 0x87
0000f7 4bb5                      .db 0xb5, 0x4b
0000f8 0079                      .db 0x79, 0x0
0000f9 b587                      .db 0x87, 0xb5
0000fa 794b                      .db 0x4b, 0x79
0000fb 8700                      .db 0x0, 0x87
0000fc 4bb5                      .db 0xb5, 0x4b
0000fd 0079                      .db 0x79, 0x0
0000fe b587                      .db 0x87, 0xb5
0000ff 794b                      .db 0x4b, 0x79
000100 8700                      .db 0x0, 0x87
000101 4bb5                      .db 0xb5, 0x4b
000102 0079                      .db 0x79, 0x0
000103 b587                      .db 0x87, 0xb5
000104 794b                      .db 0x4b, 0x79
000105 8700                      .db 0x0, 0x87
000106 4bb5                      .db 0xb5, 0x4b
000107 0079                      .db 0x79, 0x0
000108 b587                      .db 0x87, 0xb5
000109 794b                      .db 0x4b, 0x79
00010a 8700                      .db 0x0, 0x87
00010b 4bb5                      .db 0xb5, 0x4b
00010c 0079                      .db 0x79, 0x0
00010d b587                      .db 0x87, 0xb5
00010e 794b                      .db 0x4b, 0x79
00010f 8700                      .db 0x0, 0x87
000110 4bb5                      .db 0xb5, 0x4b
000111 0079                      .db 0x79, 0x0
000112 b587                      .db 0x87, 0xb5
000113 794b                      .db 0x4b, 0x79
000114 8700                      .db 0x0, 0x87
000115 4bb5                      .db 0xb5, 0x4b
000116 0079                      .db 0x79, 0x0
000117 b587                      .db 0x87, 0xb5
000118 794b                      .db 0x4b, 0x79
000119 8700                      .db 0x0, 0x87
00011a 4bb5                      .db 0xb5, 0x4b
00011b 0079                      .db 0x79, 0x0
00011c b587                      .db 0x87, 0xb5
00011d 794b                      .db 0x4b, 0x79
00011e 8700                      .db 0x0, 0x87
00011f 4bb5                      .db 0xb5, 0x4b
000120 0079                      .db 0x79, 0x0
000121 b587                      .db 0x87, 0xb5
000122 794b                      .db 0x4b, 0x79
000123 8700                      .db 0x0, 0x87
000124 4bb5                      .db 0xb5, 0x4b
000125 0079                      .db 0x79, 0x0
000126 b587                      .db 0x87, 0xb5
000127 794b                      .db 0x4b, 0x79
000128 8700                      .db 0x0, 0x87
000129 4bb5                      .db 0xb5, 0x4b
00012a 0079                      .db 0x79, 0x0
00012b b587                      .db 0x87, 0xb5
00012c 794b                      .db 0x4b, 0x79
00012d 8700                      .db 0x0, 0x87
00012e 4bb5                      .db 0xb5, 0x4b
00012f 0079                      .db 0x79, 0x0
000130 b587                      .db 0x87, 0xb5
000131 794b                      .db 0x4b, 0x79
000132 8700                      .db 0x0, 0x87
000133 4bb5                      .db 0xb5, 0x4b
000134 0079                      .db 0x79, 0x0
000135 b587                      .db 0x87, 0xb5
000136 794b                      .db 0x4b, 0x79
000137 8700                      .db 0x0, 0x87
000138 4bb5                      .db 0xb5, 0x4b
000139 0079                      .db 0x79, 0x0
00013a b587                      .db 0x87, 0xb5
00013b 794b                      .db 0x4b, 0x79
00013c 8700                      .db 0x0, 0x87
00013d 4bb5                      .db 0xb5, 0x4b
00013e 0079                      .db 0x79, 0x0
00013f b587                      .db 0x87, 0xb5
000140 794b                      .db 0x4b, 0x79
                                 		
                                 
                                 
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega8" register use summary:
x  :   2 y  :   4 z  :   3 r0 :   1 r1 :   2 r2 :   4 r3 :   3 r4 :   2 
r5 :   4 r6 :   4 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:   3 r17:   2 r18:   0 r19:   0 r20:   5 
r21:   0 r22:   0 r23:   0 r24:   0 r25:   6 r26:   7 r27:   7 r28:  13 
r29:   8 r30:   3 r31:   6 
Registers used: 20 out of 35 (57.1%)

"ATmega8" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   2 add   :   1 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 breq  :   0 brge  :   0 brhc  :   0 brhs  :   0 
brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 brne  :   6 
brpl  :   1 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 
bset  :   0 bst   :   0 cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 
cli   :   0 cln   :   0 clr   :   0 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :   0 cpc   :   0 cpi   :   2 cpse  :   0 
dec   :   4 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   0 inc   :   1 ld    :   2 ldd   :   0 ldi   :  23 
lds   :   0 lpm   :   3 lsl   :   0 lsr   :   0 mov   :  15 movw  :   0 
mul   :   0 muls  :   1 mulsu :   0 neg   :   0 nop   :   1 or    :   0 
ori   :   0 out   :   0 pop   :   0 push  :   0 rcall :   0 ret   :   0 
reti  :   0 rjmp  :   0 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   4 std   :   0 sts   :   0 sub   :   0 subi  :   0 swap  :   0 
tst   :   1 wdr   :   0 
Instructions used: 16 out of 110 (14.5%)

"ATmega8" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000282    136    506    642    8192   7.8%
[.dseg] 0x000060 0x000060      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
